

/*******************************************************************************
 * @file ClientLConfig.h
 * @author Nathan J. Hood ( @StoneyDSP )
 * @brief
 * @version 1.0.0.0
 * @date
 *
 * @copyright Copyright (c) 2022 @StoneyDSP
 *
 *******************************************************************************
*/

#pragma once

#ifndef CLIENTL_CONFIG_H_INCLUDED
#define CLIENTL_CONFIG_H_INCLUDED

/**
 * @brief Defined project configuration information.
 *
 */

#cmakedefine CMAKE_PROJECT_VENDOR "${CMAKE_PROJECT_VENDOR}"
#cmakedefine PROJECT_VENDOR "${PROJECT_VENDOR}"
#cmakedefine PROJECT_NAME "${PROJECT_NAME}"
#cmakedefine PROJECT_DESCRIPTION "${PROJECT_DESCRIPTION}"
#cmakedefine PROJECT_VERSION "${PROJECT_VERSION}"
#cmakedefine PROJECT_HOMEPAGE_URL "${PROJECT_HOMEPAGE_URL}"

#cmakedefine CMAKE_VERSION "${CMAKE_VERSION}"
#cmakedefine CMAKE_CONFIG_TYPE "${CMAKE_CONFIG_TYPE}"
#cmakedefine CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}"
#cmakedefine CMAKE_TOOLCHAIN_FILE "${CMAKE_TOOLCHAIN_FILE}"
#cmakedefine CMAKE_GENERATOR "${CMAKE_GENERATOR}"

#cmakedefine USE_FOO
#cmakedefine USE_TESTS
#cmakedefine BUILD_SHARED_LIBS
#cmakedefine USE_EXTERN
#cmakedefine GIT_SUBMODULE
#cmakedefine USE_VCPKG
#cmakedefine USE_FOLDERS

// if you are building in-source, this is the same as CMAKE_SOURCE_DIR, otherwise
// this is the top level directory of your build tree
#cmakedefine CMAKE_BINARY_DIR "${CMAKE_BINARY_DIR}"

// if you are building in-source, this is the same as CMAKE_CURRENT_SOURCE_DIR, otherwise this
// is the directory where the compiled or generated files from the current CMakeLists.txt will go to
#cmakedefine CMAKE_CURRENT_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}"

// this is the directory, from which cmake was started, i.e. the top level source directory
#cmakedefine CMAKE_SOURCE_DIR "${CMAKE_SOURCE_DIR}"

// this is the directory where the currently processed CMakeLists.txt is located in
#cmakedefine CMAKE_CURRENT_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}"

// contains the full path to the top level directory of your build tree
#cmakedefine PROJECT_BINARY_DIR "${PROJECT_BINARY_DIR}"

// contains the full path to the root of your project source directory,
// i.e. to the nearest directory where CMakeLists.txt contains the PROJECT() command
#cmakedefine PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}"

// set this variable to specify a common place where CMake should put all executable files
// (instead of CMAKE_CURRENT_BINARY_DIR)
#cmakedefine EXECUTABLE_OUTPUT_PATH "${EXECUTABLE_OUTPUT_PATH}"

// set this variable to specify a common place where CMake should put all libraries
// (instead of CMAKE_CURRENT_BINARY_DIR)
#cmakedefine LIBRARY_OUTPUT_PATH "${LIBRARY_OUTPUT_PATH}"

// tell CMake to search first in directories listed in CMAKE_MODULE_PATH
// when you use FIND_PACKAGE() or INCLUDE()
#cmakedefine CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}"

// this is the complete path of the cmake which runs currently (e.g. /usr/local/bin/cmake)
#cmakedefine CMAKE_COMMAND "${CMAKE_COMMAND}"

// this is the CMake installation directory
#cmakedefine CMAKE_ROOT "${CMAKE_ROOT}"

//this is the filename including the complete path of the file where this variable is used.
#cmakedefine CMAKE_CURRENT_LIST_FILE "${CMAKE_CURRENT_LIST_FILE}"

// this is linenumber where the variable is used
#cmakedefine CMAKE_CURRENT_LIST_LINE "${CMAKE_CURRENT_LIST_LINE}"

// this is used when searching for include files e.g. using the FIND_PATH() command.
#cmakedefine CMAKE_INCLUDE_PATH "${CMAKE_INCLUDE_PATH}"

// this is used when searching for libraries e.g. using the FIND_LIBRARY() command.
#cmakedefine CMAKE_LIBRARY_PATH "${CMAKE_LIBRARY_PATH}"

// the complete system name, e.g. "Linux-2.4.22", "FreeBSD-5.4-RELEASE" or "Windows 5.1"
#cmakedefine CMAKE_SYSTEM "${CMAKE_SYSTEM}"

// the short system name, e.g. "Linux", "FreeBSD" or "Windows"
#cmakedefine CMAKE_SYSTEM_NAME "${CMAKE_SYSTEM_NAME}"

// only the version part of CMAKE_SYSTEM
#cmakedefine CMAKE_SYSTEM_VERSION "${CMAKE_SYSTEM_VERSION}"

// the processor name (e.g. "Intel(R) Pentium(R) M processor 2.00GHz")
#cmakedefine CMAKE_SYSTEM_PROCESSOR "${CMAKE_SYSTEM_PROCESSOR}"

// is TRUE on all UNIX-like OS's, including Apple OS X and CygWin
//#cmakedefine UNIX

// is TRUE on Windows, including CygWin
//#cmakedefine WIN32

// is TRUE on Apple OS X
//#cmakedefine APPLE

// is TRUE when using the MinGW compiler in Windows
//#cmakedefine MINGW

// is TRUE on Windows when using the CygWin version of cmake
//#cmakedefine CYGWIN

// is TRUE on Windows when using a Borland compiler
//#cmakedefine BORLAND

// is TRUE on Windows when using a Borland compiler
//#cmakedefine _DEBUG

// is TRUE on Windows when using a Borland compiler
//#cmakedefine NDEBUG

// Microsoft compiler
#cmakedefine MSVC "${MSVC}"
#cmakedefine MSVC_IDE "${MSVC_IDE}"
#cmakedefine MSVC60 "${MSVC60}"
#cmakedefine MSVC70 "${MSVC70}"
#cmakedefine MSVC71 "${MSVC71}"
#cmakedefine MSVC80 "${MSVC80}"
#cmakedefine CMAKE_COMPILER_2005 "${CMAKE_COMPILER_2005}"
#cmakedefine MSVC90 "${MSVC90}"
#cmakedefine MSVC10 "${MSVC10}"


// set this to true if you don't want to rebuild the object files if the rules have changed,
// but not the actual source files or headers (e.g. if you changed the some compiler switches)
#cmakedefine CMAKE_SKIP_RULE_DEPENDENCY "${CMAKE_SKIP_RULE_DEPENDENCY}"

// since CMake 2.1 the install rule depends on all, i.e. everything will be built before installing.
// If you don't like this, set this one to true.
#cmakedefine CMAKE_SKIP_INSTALL_ALL_DEPENDENCY "${CMAKE_SKIP_INSTALL_ALL_DEPENDENCY}"

// If set, runtime paths are not added when using shared libraries. Default it is set to OFF
#cmakedefine CMAKE_SKIP_RPATH "${CMAKE_SKIP_RPATH}"

// set this to true if you are using makefiles and want to see the full compile and link
// commands instead of only the shortened ones
#cmakedefine CMAKE_VERBOSE_MAKEFILE "${CMAKE_VERBOSE_MAKEFILE}"

// this will cause CMake to not put in the rules that re-run CMake. This might be useful if
// you want to use the generated build files on another machine.
#cmakedefine CMAKE_SUPPRESS_REGENERATION "${CMAKE_SUPPRESS_REGENERATION}"

// A simple way to get switches to the compiler is to use ADD_DEFINITIONS().
// But there are also two variables exactly for this purpose:

// the compiler flags for compiling C sources
#cmakedefine CMAKE_C_FLAGS "${CMAKE_C_FLAGS}"

// the compiler flags for compiling C++ sources
#cmakedefine CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}"

// Choose the type of build.  Example: SET(CMAKE_BUILD_TYPE Debug)
#cmakedefine CMAKE_BUILD_TYPE "${CMAKE_BUILD_TYPE}"

// the compiler used for C files
#cmakedefine CMAKE_C_COMPILER "${CMAKE_C_COMPILER}"

// the compiler used for C++ files
#cmakedefine CMAKE_CXX_COMPILER "${CMAKE_CXX_COMPILER}"

// if the compiler is a variant of gcc, this should be set to 1
#cmakedefine CMAKE_COMPILER_IS_GNUCC "${CMAKE_COMPILER_IS_GNUCC}"

// if the compiler is a variant of g++, this should be set to 1
#cmakedefine CMAKE_COMPILER_IS_GNUCXX "${CMAKE_COMPILER_IS_GNUCXX}"

// the tools for creating libraries
#cmakedefine CMAKE_AR "${CMAKE_AR}"
#cmakedefine CMAKE_RANLIB "${CMAKE_RANLIB}"

#endif // CLIENTL_CONFIG_H_INCLUDED
